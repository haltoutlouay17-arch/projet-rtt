
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, ConversationHandler, MessageHandler, filters

TOKEN = "8135360979:AAHptiw9OS5BHjrw57dKdw9kcgJe6IaKUf0"
ADMIN_ID = 8437400033  # Ton vrai ID Telegram
SIGNAL_LINK = "https://signal.me/#p/+scarface.60"  # Lien vers ton Signal

# Produits avec prix par quantit√©
products = {
    "Cali Mac 1": {"description": "Top Shelf Premium Canadian Mac 1", "prix": {"5g": "50‚Ç¨", "10g": "90‚Ç¨", "25g": "150‚Ç¨", "50g": "280‚Ç¨", "100g": "550‚Ç¨"}},
    "Cali RS11": {"description": "Top Shelf Premium RS 11", "prix": {"5g": "50‚Ç¨", "10g": "90‚Ç¨", "25g": "150‚Ç¨", "50g": "280‚Ç¨", "100g": "550‚Ç¨"}},
    "Amnesia Haze": {"description": "Amnesia qualit√© Boerenjongens", "prix": {"5g": "40‚Ç¨", "10g": "80‚Ç¨", "25g": "140‚Ç¨", "50g": "260‚Ç¨", "100g": "520‚Ç¨"}},
    "Hash Static Frozen": {"description": "Top Moroccans Premium Pollens", "prix": {"5g": "40‚Ç¨", "10g": "80‚Ç¨", "25g": "140‚Ç¨", "50g": "260‚Ç¨", "100g": "480‚Ç¨"}}
}

# √âtats ConversationHandler
QUANTITY, ADDRESS, PHONE = range(3)
user_order = {}

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(prod, callback_data=prod)] for prod in products]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üêæ Bienvenue au Mini Zoo ! Choisis un produit :", reply_markup=reply_markup)

# Cliquer sur produit ‚Üí proposer quantit√©s
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    prod = query.data
    user_order[query.from_user.id] = {"produit": prod}
    keyboard = [[InlineKeyboardButton(f"{q} - {products[prod]['prix'][q]}", callback_data=q)] for q in products[prod]['prix']]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(f"Choisissez la quantit√© pour {prod} :", reply_markup=reply_markup)
    return QUANTITY

# Choisir quantit√©
async def choose_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    quantity = query.data
    user_order[query.from_user.id]["quantit√©"] = quantity
    await query.message.reply_text("üìç Veuillez entrer votre adresse compl√®te :")
    return ADDRESS

# R√©cup√©rer l'adresse
async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_order[update.message.from_user.id]["adresse"] = update.message.text
    await update.message.reply_text("üìû Veuillez entrer votre num√©ro de t√©l√©phone (10 chiffres) :")
    return PHONE

# R√©cup√©rer le t√©l√©phone et envoyer √† l'admin
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text
    if not phone.isdigit() or len(phone) < 10:
        await update.message.reply_text("‚ùå Num√©ro invalide. Veuillez entrer un num√©ro valide de 10 chiffres :")
        return PHONE
    
    user_order[update.message.from_user.id]["phone"] = phone
    order_info = user_order[update.message.from_user.id]
    
    # Message √† l'admin
    msg = (
        f"üì¶ Nouvelle commande !\n\n"
        f"Produit : {order_info['produit']}\n"
        f"Quantit√© : {order_info['quantit√©']}\n"
        f"Adresse : {order_info['adresse']}\n"
        f"T√©l√©phone : {order_info['phone']}\n"
        f"Client : {update.message.from_user.first_name} ({update.message.from_user.id})\n\n"
        f"üì≤ Contact Signal : {SIGNAL_LINK}"
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=msg)
    
    await update.message.reply_text("‚úÖ Votre commande a √©t√© re√ßue ! Nous vous contacterons bient√¥t.")
    user_order.pop(update.message.from_user.id)
    return ConversationHandler.END

# Annuler
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå Commande annul√©e.")
    user_order.pop(update.message.from_user.id, None)
    return ConversationHandler.END

def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button, pattern="^.*$")],
        states={
            QUANTITY: [CallbackQueryHandler(choose_quantity)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    print("‚úÖ Bot lanc√©...")
    app.run_polling()

if __name__ == "__main__":
    main()